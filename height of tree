class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==NULL)
        return 0;
        int lh=maxDepth(root->left);
        int rh=maxDepth
        (root->right);
        return 1+ max(lh,rh);
    }
};
Approach : 

We start to travel recursively and do our work in Post Order.
 Reason behind using Post Order comes from our intuition , that if we know the result of  left and right child then we can calculate the result using that. 
This is exactly an indication of PostOrder, because in PostOrder we already calculated results for left and right children than we do it for current node.
So for every node post order, we do Max( left result , right result ) + 1 and return it to the previous call.
Base Case is when root == null so we need to return 0;


Time Complexity: O(N) 

Space Complexity: O(1) Extra Space + O(H) Recursion Stack space, where “H”  is the height of the binary tree.
